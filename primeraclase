{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyO24zkGiu9Z64x1viVCoScd",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/iannnnjaja/primera-clase/blob/main/primeraclase\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "269975e0"
      },
      "source": [
        "<a name='1'></a>\n",
        "\n",
        "# Variables\n",
        "[regresar al contenido](#c1)\n",
        "\n",
        "Las variables son contenedores para almacenar valores de datos."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fb9dfa06"
      },
      "source": [
        "<a name='1-1'></a>\n",
        "\n",
        "## Declaración\n",
        "[regresar al contenido](#c1)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b4ba7e62"
      },
      "source": [
        "Python no tiene un comando para declarar una variable.\n",
        "\n",
        "Una variable se crea en el momento en que le asignas un valor por primera vez."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "b667a2db",
        "outputId": "f7f05f4c-9887-4b5a-8d41-9721ef02245b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10 Iván\n"
          ]
        }
      ],
      "source": [
        "x = 10\n",
        "y = \"Iván\"\n",
        "print(x,y)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b69354fb"
      },
      "source": [
        "Las variables no necesitan ser declaradas con un tipo específico y pueden cambiar de tipo incluso después de haber sido asignadas."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "03a1f8e6",
        "outputId": "5f92c165-3427-4f7a-cebf-f8043b1c8de7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Joselyne\n"
          ]
        }
      ],
      "source": [
        "x = 4       # x es una variable de tipo int\n",
        "x = \"Joselyne\" # x es ahora una variable de tipo str\n",
        "print(x)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "afa98fb0"
      },
      "source": [
        "<a name='1-2'></a>\n",
        "\n",
        "## Casteo\n",
        "[regresar al contenido](#c1)\n",
        "\n",
        "Si deseas especificar el tipo de dato de una variable, esto se puede hacer mediante la conversión de tipos o casteo"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "9026819f",
        "outputId": "9166c800-f511-4c98-8144-295f1c22262a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'str'> <class 'int'> <class 'float'>\n"
          ]
        }
      ],
      "source": [
        "x = str(3)    # x es un str\n",
        "y = int(3)    # y es un entero\n",
        "z = float(3)  # z es un flotante\n",
        "\n",
        "print(type(x),type(y),type(z))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "d003deb7"
      },
      "source": [
        "<a name='1-3'></a>\n",
        "\n",
        "## Cadenas\n",
        "[regresar al contenido](#c1)\n",
        "\n",
        "Las variables de tipo cadena se pueden declarar utilizando comillas simples o dobles."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "177ab7bd"
      },
      "outputs": [],
      "source": [
        "x = \"Iván\"\n",
        "# is the same as\n",
        "y = 'Iván'"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "fda7a565",
        "outputId": "1fee654f-92c0-4b9f-d84e-7f9cfff83ec8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Iván Iván\n"
          ]
        }
      ],
      "source": [
        "print(x,y)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "334a05cf"
      },
      "source": [
        "<a name='1-4'></a>\n",
        "\n",
        "## Caso sensitivo\n",
        "[regresar al contenido](#c1)\n",
        "\n",
        "\n",
        "Los nombres de las variables son sensibles a mayúsculas y minúsculas."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "6257ffa7",
        "outputId": "7a1352ab-421e-42e3-c429-24ee0708b660",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4 Sally\n"
          ]
        }
      ],
      "source": [
        "a = 4\n",
        "A = \"Sally\"\n",
        "#A will not overwrite a\n",
        "\n",
        "print(a,A)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "resultado = 5 + 3\n",
        "resultado"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-y6AhdBYGTt1",
        "outputId": "b1254aa8-0e15-439c-ac60-715693119c51"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "8"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#resta\n",
        "3-4"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0vUXodWoGkTE",
        "outputId": "dc72ddb9-6bb9-40d1-b76d-471bdebb74e4"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "-1"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#mult\n",
        "3*4"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rPiT_U1RGtds",
        "outputId": "35067153-742b-4960-d90e-a2a2e46df394"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "12"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#division\n",
        "3/6\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "waWxCug6G2Vs",
        "outputId": "f3a1793b-ccb1-4e70-9338-58c994501906"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.5"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import beyond\n",
        "print(beyond.)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 110
        },
        "id": "Ng5xZRjnHB9M",
        "outputId": "6c23fb3c-8aaa-4b6a-a2d8-04ea15d65733"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "invalid syntax (ipython-input-467129452.py, line 2)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"/tmp/ipython-input-467129452.py\"\u001b[0;36m, line \u001b[0;32m2\u001b[0m\n\u001b[0;31m    print(beyond.)\u001b[0m\n\u001b[0m                 ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#complex\n",
        "complex(3+4j)\n",
        "type"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HWA4kjktH4ck",
        "outputId": "19fab74f-9ffc-47c3-c170-c91eb41f91fa"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(3+4j)"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#celsius a K\n",
        "c=25\n",
        "K=c+273.15\n",
        "#celsius a F\n",
        "F\n"
      ],
      "metadata": {
        "id": "GyjeYR_zITC8"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}